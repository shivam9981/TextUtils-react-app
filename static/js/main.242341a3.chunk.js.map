{"version":3,"sources":["templates/Model1.js","templates/Navbar.js","App.js","reportWebVitals.js","index.js"],"names":["Model1","props","useState","text","setText","className","heading","style","backgroundColor","mode","color","value","onChange","event","target","type","onClick","newtext","toUpperCase","toLowerCase","navigator","clipboard","writeText","split","join","filter","element","length","id","Navbar","title","toggleMode","role","htmlFor","defaultProps","App","setmode","document","body","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"0QAGe,SAASA,EAAOC,GAC3B,MAAwBC,mBAAS,IAAjC,mBAAOC,EAAP,KAAaC,EAAb,KA6BA,OACI,mCACI,sBAAKC,UAAU,gBAAf,UACI,6BAAKJ,EAAMK,UACX,0BAAUD,UAAU,UAAUE,MAAS,CAACC,gBAAgC,SAAfP,EAAMQ,KAAgB,QAAQ,UAAYC,MAAsB,SAAfT,EAAMQ,KAAgB,QAAQ,SACxIE,MAAOR,EAAMS,SARP,SAACC,GACfT,EAAQS,EAAMC,OAAOH,UAQb,sBAAKN,UAAU,YAAf,UACI,wBAAQU,KAAK,SAASV,UAAU,MAAMW,QAlCnC,WACf,IAAMC,EAAUd,EAAKe,cACrBd,EAAQa,IAgCI,uBACA,wBAAQF,KAAK,SAASV,UAAU,MAAMW,QA9BnC,WACf,IAAMC,EAAUd,EAAKgB,cACrBf,EAAQa,IA4BI,uBACA,wBAAQF,KAAK,SAASV,UAAU,MAAMW,QA1BnC,WAEfZ,EADgB,KAyBJ,mBACA,wBAAQW,KAAK,SAASV,UAAU,MAAMW,QAtBpC,WACdI,UAAUC,UAAUC,UAAUnB,IAqBlB,kBACA,wBAAQY,KAAK,SAASV,UAAU,MAAMW,QAnB7B,WACrB,IAAMC,EAAUd,EAAKoB,MAAM,QAC3BnB,EAAQa,EAAQO,KAAK,OAiBT,6BAEJ,sBAAKnB,UAAU,QAAf,UACI,8CACA,8BAAIF,EAAKoB,MAAM,OAAOE,QAAO,SAACC,GAAc,OAA0B,IAAnBA,EAAQC,UAAgBA,OAA3E,aACExB,EAAKwB,OADP,kBAC8B,KAAQxB,EAAKoB,MAAM,KAAKI,OADtD,wBAEA,yCACA,mBAAGC,GAAG,OAAQrB,MAAS,CAACG,OAAOT,EAAMQ,KAAgB,UAArD,SAAwEN,EAAKwB,OAAS,EAAIxB,EAAO,oEChDtG,SAAS0B,EAAO5B,GAC3B,OACI,mCACI,8BACI,sBAAKI,UAAU,eAAf,UACI,mBAAGuB,GAAG,OAAN,SAAc3B,EAAM6B,QAEpB,qBAAKzB,UAAU,YAAf,SACI,sBAAKA,UAAU,yBAAf,UACI,uBAAOA,UAAU,mBAAmBW,QAASf,EAAM8B,WAAYhB,KAAK,WAAWiB,KAAK,SAASJ,GAAG,2BAChG,uBAAOvB,UAAW,mBAAmB4B,QAAQ,yBAAyBL,GAAK,yBAA3E,0CAc5BC,EAAOK,aAAe,CAClBJ,MAAO,aCAIK,MAvBf,WACE,MAAyBjC,mBAAS,QAAlC,mBAAOO,EAAP,KAAc2B,EAAd,KAcA,OACE,qCACE,cAACP,EAAD,CAAQC,MAAQ,SAASrB,KAAQA,EAAMsB,WAfxB,WACJ,SAATtB,GACF2B,EAAQ,WACRC,SAASC,KAAK/B,MAAMC,gBAAkB,UACtC6B,SAASC,KAAK/B,MAAMG,MAAQ,UAI5B0B,EAAQ,QACRC,SAASC,KAAK/B,MAAMC,gBAAkB,QACtC6B,SAASC,KAAK/B,MAAMG,MAAQ,cAM5B,cAACV,EAAD,CAAQM,QAAU,0BAA0BG,KAAMA,QCXzC8B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFb,SAASc,eAAe,SAM1BZ,M","file":"static/js/main.242341a3.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport '../css/textbox1.css'\r\n\r\nexport default function Model1(props) {\r\n    const [text, setText] = useState('')\r\n\r\n    const obupperfun = () => {\r\n        const newtext = text.toUpperCase();\r\n        setText(newtext)\r\n    }\r\n\r\n    const oblowerfun = () => {\r\n        const newtext = text.toLowerCase();\r\n        setText(newtext)\r\n    }\r\n\r\n    const obclearfun = () => {\r\n        const newtext = ''\r\n        setText(newtext)\r\n    }\r\n\r\n    const obcopyfun = () => {\r\n        navigator.clipboard.writeText(text)\r\n    }\r\n\r\n    const removeExtraspace = () => {\r\n        const newtext = text.split(/[ ]+/)\r\n        setText(newtext.join(\" \"));\r\n    }\r\n\r\n    const changefun = (event) => {\r\n        setText(event.target.value)\r\n    }\r\n    return (\r\n        <>\r\n            <div className=\"constructure1\">\r\n                <h2>{props.heading}</h2>\r\n                <textarea className=\"textbox\" style = {{backgroundColor: props.mode === 'dark'?'white':'#2F2E2B' , color: props.mode === 'dark'?'black':'white'}}  \r\n                value={text} onChange={changefun}></textarea>\r\n                <div className=\"buttondiv\">\r\n                    <button type=\"submit\" className=\"btn\" onClick={obupperfun} >UpperCase</button>\r\n                    <button type=\"submit\" className=\"btn\" onClick={oblowerfun}>LowerCase</button>\r\n                    <button type=\"submit\" className=\"btn\" onClick={obclearfun}>Clear</button>\r\n                    <button type=\"submit\" className=\"btn\" onClick={obcopyfun}>Copy</button>\r\n                    <button type=\"submit\" className=\"btn\" onClick={removeExtraspace}>Remove Space</button>\r\n                </div>\r\n                <div className=\"foot1\">\r\n                    <h4>Your Summary</h4>\r\n                    <p>{text.split(/\\s+/).filter((element) => { return element.length !== 0 }).length} word  and\r\n                     {text.length} character and {0.008 * text.split(' ').length} minutes read word</p>\r\n                    <h3>Preview</h3>\r\n                    <p id=\"para\"  style = {{color: props.mode === 'dark'?'black':'black'}}>{text.length > 0 ? text : \"Enter someting in the text box above to preview it here\"}</p>\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nexport default function Navbar(props) {\r\n    return (\r\n        <>\r\n            <div>\r\n                <div className=\"constructure\">\r\n                    <p id=\"logo\">{props.title}</p>\r\n\r\n                    <div className=\"searchbar\">\r\n                        <div className=\"form-check form-switch\">\r\n                            <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\"/>\r\n                            <label className =\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\" id = \"flexSwitchCheckDefault\">Enable Dark Mode</label>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\n\r\nNavbar.propTypes = {\r\n    title: PropTypes.string\r\n};\r\n\r\nNavbar.defaultProps = {\r\n    title: 'SHIVAMGEE'\r\n}","import './App.css';\nimport './css/home.css'\nimport Model1 from './templates/Model1';\nimport Navbar from './templates/Navbar';\nimport {useState} from 'react';\nfunction App() {\n  const [mode , setmode] = useState('dark')\n  const toggleMode = ()=>{\n    if (mode === 'dark'){\n      setmode('#2F2E2B')\n      document.body.style.backgroundColor = '#2F2E2B'\n      document.body.style.color = 'white'\n\n    }\n    else{\n      setmode('dark')\n      document.body.style.backgroundColor = 'white'\n      document.body.style.color = '#2F2E2B'\n    }\n  }\n  return (\n    <>\n      <Navbar title = \"SHIVAM\" mode = {mode} toggleMode= {toggleMode} />\n      <Model1 heading = \"Enter Your Text Element\" mode={mode}/>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}